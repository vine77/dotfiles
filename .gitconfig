[alias]
  s = status
  st = status
  wow = status
  c = checkout
  co = checkout
  a = add
  cm = commit
  ct = commit
  b = branch
  br = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
  br-merged = for-each-ref --merged=development --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - â‘ƒ %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
  ch = cherry-pick
  d = diff
  df = diff
  dif = diff
  r = rebase
  x = !gitx
  tags = tag
  prune-tags = !git tag -l | xargs git tag -d && git fetch -t
  changes = "!f() { if [ $1 ]; then git diff $1~ $1; else git diff HEAD~ HEAD; fi }; f"
  props = blame
  staged = diff --staged
  amend = commit --amend --no-edit
  continue = rebase --continue
  abort = rebase --abort
  yolo = push --force
  sync = !git fetch --all --prune && git merge --ff-only upstream/`git rev-parse --abbrev-ref HEAD` && git submodule update --init --recursive && git push --set-upstream origin `git rev-parse --abbrev-ref HEAD`
  oneline = log --date=short --no-merges --invert-grep --grep=^Build --grep=^Version --format="%C(auto)%h%x20%<(10,trunc)%an%x20%C(auto,blue)%ad%C(auto,reset)%x20%<(70,trunc)%s"
  fuller = log -n1 --format=fuller
  logme = log --date=short --author='Nathan Ward' --format="%C(auto)%h%x20%<(10,trunc)%an%x20%C(auto,blue)%ad%C(auto,reset)%x20%<(60,trunc)%s"
  delete = "!f() { git branch -D $1; git push origin --delete $1; }; f"
  ff = !git fetch --all --prune && git merge --ff-only origin/`git rev-parse --abbrev-ref HEAD` && git submodule update --init --recursive
  date = !GIT_COMMITTER_DATE=\"`date`\" git commit --amend --no-edit --date \"`date`\"
  files = "!f() { git diff --name-status $1^ $1; }; f"
  top = !git log --oneline --graph --decorate `git rev-parse --abbrev-ref HEAD` ^origin/`git rev-parse --abbrev-ref HEAD`
  pushupstream = !git push --tags --set-upstream upstream `git rev-parse --abbrev-ref HEAD` && git branch --set-upstream-to=origin/master
  pushorigin = !git push --tags --set-upstream origin `git rev-parse --abbrev-ref HEAD`
  set-upstream-to-origin = !git branch --set-upstream-to origin/`git rev-parse --abbrev-ref HEAD`
  merge-long = merge --no-ff --log=999
  sweep = !git clean -df && git checkout .
  ignore = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged
  pop-k = !git commit -m "staged" && git stash pop && git reset --soft HEAD~  # can be used after `git stash -k` to pop the stash while maintaining staged files
  remove-all-except = "!f() { git filter-branch -f --prune-empty --index-filter 'git rm --cached -r -q -- . && git reset -q $GIT_COMMIT -- $@' -- --all }; f"
  diff-image = "!f() { GIT_DIFF_IMAGE_ENABLED=1 git diff \"$@\"; }; f"
  pickaxe = log -p -S
  interactive = "!f() { if [ $1 ]; then git rebase -i HEAD~$1; else git rebase -i HEAD~2; fi }; f"
  reset-author = commit --amend --reset-author --no-edit
  fetchall = fetch --all --prune
  resetupstream = !git reset --hard upstream/`git rev-parse --abbrev-ref HEAD`
  fr = !git fetch --all --prune && git reset --hard upstream/`git rev-parse --abbrev-ref HEAD`
[credential]
  helper = osxkeychain
[user]
	email = nathan.ward@puppet.com
	name = Nathan Ward
	# signingKey = BBA9B262606EE7EE
[github]
  user = vine77
[core]
  excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
[push]
  default = simple
[fetch]
  prune = true
[diff "image"]
	command = ~/src/git-diff-image/git_diff_image
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[commit]
	# gpgSign = true
[rerere]
	enabled = false
